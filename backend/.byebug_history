c!
filter_params
c!
C!
attributes
c
attributes
c
ex.message
ex
c!
c.account.mops.find{|m| m.meta["card_id"]}.meta["card_id"]
c.account.mops.find{|m| m.meta["card_id"]}
c.id
c.account.mops.find{|m| m.meta["card_id"]}
c.account.mops.find{|m| m.meta["card_id"] and c.id == m.meta["card_id"]}
c.account.mops.find{|x| x.meta["auto_generated"] == true}
c.account.mops.find{|x| x.meta["autogenerated"] == true}
c.account.mops
c.account
c.mop
c=@current_user.cards.find_by_id(filter_params[:card_id])
@current_user.cards.find_by_id(filter_params[:card_id])
@current_user.cards
c!
exit
resp.length
resp
c!
c
c!
c
c!
self.cards
c!
c
c!
@current_user
c!
@current_user
c
card_json
card_json['account'] = card.account.name.titleize
card.ctype == CREDITCARD
card_json
c
card.account.name
card.account
card
c!
cookies
cookies[:auth_token]
current_user
c!
params
filter_params
@account = Account.find_by_id(params[:id])
params[:id]
params
c
c!
accounts
c!
c
User.all
exit
User.count
User.all
c!
resp
c!
c
exit
Websocket.publish
exit
AccountChannel.new
AccountChannel
Websocket.publish
c
exit
Websocket.publish
exit
Websocket.publish
c
c!
WS.new
c!
w=Websocket.new
w=Websocket::CONST
c!
w=Websocket::CONST
c
c!
AccountChannel.new
AccountsChannel.new
c
exit
x=Websocket.publish
x=Websocket.new
c!
Websocket::Const
c!
self.balance_after = prev_tr.balance_after + self.get_difference
self.get_difference
self
c!
c
c!
Mop.all
c!
Mop.all
c!
Mop.all
@mop
@account
Account.all
resp
c
exit
Account.all
resp
c
c!
self.account.daily_logs
self.account.update_balance(self)
c
c!
self
self.account.update_balance(self)
c
DailyLog.all
self.account
self.account.update_balance(self)
self.account
c
self.account_opening?
c
self.account_opening?
c!
self.account_opening?
self
c
self.account_opening?
self
c
DailyLog.all
c!
DailyLog.all
self.reload.daily_logs.blank?
self.daily_logs.blank?
self
self.daily_logs.blank?
meta = {"tr_ids" => []}
log
c!
@account.reload.daily_logs
@account.daily_logs
c!
@account
c
DailyLog.last.reload
DailyLog.last
DailyLog.all
exit
DailyLog.all
c!
response.body
response
c!
Transaction.count
c!
Transaction.count
Transaction.all
c
transaction
c!
response.body
c!
response.body
c!
response.body
c
c!
response.body
c!
self.balance_after
c!
self.account_opening?
self
c!
transaction
c!
resp
c
c!
mop
@mop
resp
c
exit
mop
c!
mop.user
mop.account
exit
mop.account
exit
mop.account
mop.acccount
mop
c
c!
resp
exit
resp=response.body
c!
transaction
c
c!
self.update_balance(tr)
tr.id
tr
c
c!
c
c!
c
c!
c
tr.mop_id
tr
c
c!
c
mop
c!
resp=Oj.load(response.body)
c
mop
c
c!
mop
c!
resp=Oj.load(response.body)
c
c!
resp=Oj.load(response.body)
c!
resp
c!
resp
c!
exit
@account.user.accounts
@account.user
Account.all
